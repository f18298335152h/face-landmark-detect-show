float DotProduct(float *v1, float *v2, std::size_t length) {
    float sum = 0.f; 
#ifdef __ARM_NEON
    auto nn = length >> 3u;
    auto remain = length - (nn << 3u);
#else
    auto remain = length;
#endif // __ARM_NEON

    float* w0 = v1;
    float* w1 = v2;

#ifdef __ARM_NEON
    float32x4_t vector = vdupq_n_f32(0.f);
#ifdef __aarch64__
      if (nn > 0) {
          asm volatile(
              "0:                                         \n"
              "prfm           pldl1keep, [%1, #256]       \n"
              "prfm           pldl1keep, [%2, #256]       \n"
              "ld1        {v0.4s},  [%1],     #16         \n"
              "ld1        {v1.4s},  [%2],     #16         \n"
              "fmla       %3.4s,    v0.4s,    v1.4s       \n"
              "ld1        {v0.4s},  [%1],     #16         \n"
              "ld1        {v1.4s},  [%2],     #16         \n"
              "fmla       %3.4s,    v0.4s,    v1.4s       \n"
              "subs       %w0,      %w0,      #1          \n"
              "bne        0b                              \n"
              :"=r"(nn),
              "=r"(w0),
              "=r"(w1),
              "=w"(vector)
             :"0"(nn),
              "1"(w0),
              "2"(w1),
              "3"(vector)
             :"cc", "memory", "v0", "v1");
      }
//    if (nn > 0) {
//        asm volatile(
//            "0:                                         \n"
//            "prfm           pldl1keep, [%1, #256]       \n"
//            "prfm           pldl1keep, [%2, #256]       \n"
//            "ld1        {v0.4s},  [%1],     #16         \n"
//            "ld1        {v1.4s},  [%2],     #16         \n"
//
//            "fmla       %3.4s,    v0.4s,    v1.4s       \n"
//
//            "ld1        {v0.4s},  [%1],     #16         \n"
//            "ld1        {v1.4s},  [%2],     #16         \n"
//            "fmla       %4.4s,    v0.4s,    v0.4s       \n"
//            "fmla       %3.4s,    v0.4s,    v1.4s       \n"
//            "subs       %w0,      %w0,      #1          \n"
//            "fmla       %5.4s,    v1.4s,    v1.4s       \n"
//            "bne        0b                              \n"
//
//            :"=r"(nn),
//             "=r"(w0),
//             "=r"(w1),
//             "=w"(vector)
//            :"0"(nn),
//             "1"(w0),
//             "2"(w1),
//             "3"(vector)
//            :"cc", "memory", "v0", "v1");
//    }
#else
    if (nn > 0) {

        asm volatile (
            "0:                               \n"
            "pld    [%1,    #256]             \n"
            "pld    [%2,    #256]             \n"
            "vld1.f32   {d0-d1},    [%1]!     \n"

            "vld1.f32   {d2-d3},    [%1]!     \n"  //q0-q1

            "vld1.f32   {d4-d5},    [%2]!     \n" //q0-q2
            "vmla.f32   %q3,    q0,  q2       \n"

            "vld1.f32   {d6-d7},    [%2]!     \n" //q1-q3
            "vmla.f32   %q3,    q1,  q3       \n"

            "subs       %0,     #1            \n"
            "bne        0b                    \n"


            :"=r"(nn),
             "=r"(w0),
             "=r"(w1),
             "=w"(vector)
            :"0"(nn),
             "1"(w0),
             "2"(w1),
             "3"(vector)
            :"cc", "memory", "q0", "q1", "q2", "q3"); 
    }
#endif

    float32x2_t sumVec32x2 = vadd_f32(vget_high_f32(vector), vget_low_f32(vector));
    sum = vget_lane_f32(sumVec32x2, 0) + vget_lane_f32(sumVec32x2, 1);
#endif
    for (; remain > 0; --remain) {
        sum += (*w0) * (*w1);
        ++w0;
        ++w1;
    }
    return sum;
}

